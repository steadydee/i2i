import streamlit as st
from backend.graph import run_workflow
from utils.fields import render_fields          # generic field renderer

st.title("i2i demo")

# â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€ session helpers â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€
state = st.session_state
state.setdefault("prompt", "")
state.setdefault("event", None)    # last workflow response

# â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€ one-button form â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€
with st.form("main"):
    state.prompt = st.text_input("What do you need?", value=state.prompt)

    extra_data = {}
    valid = True
    evt = state.event
    if evt and evt["ui_event"] == "form":
        extra_data, valid = render_fields(evt["fields"])

    submitted = st.form_submit_button("Submit")

# â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€ handle Submit click(s) â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€
if submitted:
    # 1st click â€“ only prompt exists
    if evt is None or evt["ui_event"] != "form":
        state.event = run_workflow(state.prompt)
        st.rerun()

    # 2nd click â€“ prompt + form data
    elif valid:
        state.event = run_workflow(state.prompt, extra_data)
        st.rerun()

# â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€ final output â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€
evt = state.event
if evt and evt["ui_event"] == "download_link":
    st.markdown(f"[Download the document]({evt['url']})", unsafe_allow_html=True)
    if st.button("ðŸ”„ Start over"):
        state.clear()
        st.rerun()

elif evt and evt["ui_event"] == "text":
    st.write(evt["content"])
    if st.button("ðŸ”„ Start over"):
        state.clear()
        st.rerun()
